// Code generated by counterfeiter. DO NOT EDIT.
package lightstep_thriftfakes

import (
	"sync"

	"github.com/lightstep/lightstep-tracer-go/lightstep_thrift"
)

type FakeReportingService struct {
	ReportStub        func(auth *lightstep_thrift.Auth, request *lightstep_thrift.ReportRequest) (r *lightstep_thrift.ReportResponse, err error)
	reportMutex       sync.RWMutex
	reportArgsForCall []struct {
		auth    *lightstep_thrift.Auth
		request *lightstep_thrift.ReportRequest
	}
	reportReturns struct {
		result1 *lightstep_thrift.ReportResponse
		result2 error
	}
	reportReturnsOnCall map[int]struct {
		result1 *lightstep_thrift.ReportResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReportingService) Report(auth *lightstep_thrift.Auth, request *lightstep_thrift.ReportRequest) (r *lightstep_thrift.ReportResponse, err error) {
	fake.reportMutex.Lock()
	ret, specificReturn := fake.reportReturnsOnCall[len(fake.reportArgsForCall)]
	fake.reportArgsForCall = append(fake.reportArgsForCall, struct {
		auth    *lightstep_thrift.Auth
		request *lightstep_thrift.ReportRequest
	}{auth, request})
	fake.recordInvocation("Report", []interface{}{auth, request})
	fake.reportMutex.Unlock()
	if fake.ReportStub != nil {
		return fake.ReportStub(auth, request)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.reportReturns.result1, fake.reportReturns.result2
}

func (fake *FakeReportingService) ReportCallCount() int {
	fake.reportMutex.RLock()
	defer fake.reportMutex.RUnlock()
	return len(fake.reportArgsForCall)
}

func (fake *FakeReportingService) ReportArgsForCall(i int) (*lightstep_thrift.Auth, *lightstep_thrift.ReportRequest) {
	fake.reportMutex.RLock()
	defer fake.reportMutex.RUnlock()
	return fake.reportArgsForCall[i].auth, fake.reportArgsForCall[i].request
}

func (fake *FakeReportingService) ReportReturns(result1 *lightstep_thrift.ReportResponse, result2 error) {
	fake.ReportStub = nil
	fake.reportReturns = struct {
		result1 *lightstep_thrift.ReportResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeReportingService) ReportReturnsOnCall(i int, result1 *lightstep_thrift.ReportResponse, result2 error) {
	fake.ReportStub = nil
	if fake.reportReturnsOnCall == nil {
		fake.reportReturnsOnCall = make(map[int]struct {
			result1 *lightstep_thrift.ReportResponse
			result2 error
		})
	}
	fake.reportReturnsOnCall[i] = struct {
		result1 *lightstep_thrift.ReportResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeReportingService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.reportMutex.RLock()
	defer fake.reportMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReportingService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ lightstep_thrift.ReportingService = new(FakeReportingService)
